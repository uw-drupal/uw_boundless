<?php

/**
 * @file
 * UW Boundless (Bootstrap subtheme).
 */

use Drupal\Core\Link;
use Drupal\core\Url;
use Drupal\Core\Render\Element;
use Drupal\file\Entity\File;
use Drupal\Core\Form\FormStateInterface;

/**
 * UW colors.
 */
abstract class UwColor {
  const PURPLE = '#4b2e83';
  const GOLD = '#b7a57a';
  const METALLIC_GOLD = '#85754d';
  const LIGHT_GREY = '#d9d9d9';
  const DARK_GREY = '#444444';
  const BLACK = '#000000';
  const WHITE = '#ffffff';

}

/**
 * Adds the view mode as a class for the media's wrapper div.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An array of elements to display in view mode.
 *   - media: The media item.
 *   - name: The label for the media item.
 *   - view_mode: View mode; e.g., 'full', 'teaser', etc.
 *
 * @see media.module->template_preprocess_media()
 */
function uw_boundless_preprocess_media(array &$variables) {
  $variables['attributes']['class'][] = 'view-mode--' . $variables['elements']['#view_mode'];
}

/**
 * Implements hook_preprocess().
 */
function uw_boundless_preprocess_block(array &$variables) {
  if ($variables['plugin_id'] == 'system_menu_block:main') {
    $variables['attributes']['class'][] = 'dawgdrops';
    $variables['attributes']['class'][] = 'js-dawgdrops';
  }
}

/**
 * Implements hook_preprocess().
 */
function uw_boundless_preprocess_page(array &$variables) {
  $variables['current_year'] = date("Y");
  $login_url = theme_get_setting('uw_boundless_login_url') ?? '';
  $variables['login_url'] = base_path() . ltrim($login_url, '/') ;
  // Load the site name out of configuration.
  $config = \Drupal::config('system.site');
  $variables['site_name'] = $config->get('name');
  $variables['site_slogan'] = $config->get('slogan');

  // Determine if the sidebar has content.
  $variables['sidebar_empty'] = Element::isEmpty($variables['page']['sidebar_first']) && Element::isEmpty($variables['page']['sidebar_second']);

  // Sidebar menu. [deprecated]
  $variables['uw_sidebar_menu'] = _uw_boundless_uw_sidebar_menu();
  $variables['uw_boundless_sidebar_menu_visibility'] = theme_get_setting('uw_boundless_sidebar_menu_visibility');

  // Relative menu (replaces sidebar menu)
  $variables['uw_boundless_use_relative_mobile'] = theme_get_setting('uw_boundless_mobile_menu_type') == 'relative' ?? false;

  // Hero images.
  $variables['uw_boundless_hero_image_front_display'] = theme_get_setting('uw_boundless_hero_image_front_display') ?? 'large';
  $variables['uw_boundless_hero_image_display'] = theme_get_setting('uw_boundless_hero_image_display') ?? 'small';

  // Get the default hero images. Defer to a subtheme's image if one exists.
  $front_hero_display = theme_get_setting('uw_boundless_hero_image_front_display') ?? theme_get_setting('uw_boundless_hero_image_front_display', 'uw_boundless');
  if ($front_hero_display == 'large') {
    $variables['uw_hero_image_front_path'] = theme_get_setting('uw_boundless_hero_image_front_default_path') ??
      theme_get_setting('uw_boundless_hero_image_front_default_path', 'uw_boundless');
  }
  else {
    $variables['uw_hero_image_front_path'] = theme_get_setting('uw_boundless_hero_image_default_path') ??
      theme_get_setting('uw_boundless_hero_image_default_path', 'uw_boundless');
  }
  $variables['uw_hero_image_path'] = theme_get_setting('uw_boundless_hero_image_default_path') ?? theme_get_setting('uw_boundless_hero_image_default_path', 'uw_boundless');

  // If default is overridden with a file upload, reset the hero paths.
  if (!theme_get_setting('uw_boundless_hero_image_front_default') &&
    !empty(theme_get_setting('hero_image_front_upload'))) {
    $hero_front = theme_get_setting('hero_image_front_upload');
    $fid = reset($hero_front);
    if ($file = File::load($fid)) {
      $variables['uw_hero_image_front_path'] = $file->createFileUrl(TRUE);
    }
  }

  if (!theme_get_setting('uw_boundless_hero_image_default') &&
    !empty(theme_get_setting('hero_image_upload'))) {
    $hero = theme_get_setting('hero_image_upload');
    $fid2 = reset($hero);
    if ($file = File::load($fid2)) {
      $variables['uw_hero_image_path'] = $file->createFileUrl(TRUE);
    }
  }

  // Front page title and shadow colors.
  $variables['uw_boundless_front_page_title_color'] = theme_get_setting('uw_boundless_front_page_title_color');
  $variables['uw_front_title_text_shadow'] = _uw_boundless_get_text_shadow($variables['uw_boundless_front_page_title_color']);

  // Slant color.
  $variables['uw_boundless_front_page_slant_color'] = theme_get_setting('uw_boundless_front_page_slant_color');

  // Front page slogan and shadow colors.
  $variables['uw_boundless_front_page_slogan_color'] = theme_get_setting('uw_boundless_front_page_slogan_color');
  $variables['uw_front_slogan_text_shadow'] = _uw_boundless_get_text_shadow($variables['uw_boundless_front_page_slogan_color']);
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @see https://www.drupal.org/docs/8/theming-drupal-8/creating-advanced-theme-settings
 */
function uw_boundless_form_system_theme_settings_alter(&$form, FormStateInterface &$form_state, $form_id = NULL) {
  // Workaround for a core bug affecting admin themes. See issue #943212.
  if (isset($form_id)) {
    return;
  }

  // Array of UW colors for select options.
  $_colors = [
    '#4b2e83' => t('Purple'),
    '#b7a57a' => t('Gold'),
    '#85754d' => t('Metallic Gold'),
    '#d9d9d9' => t('Light Grey'),
    '#444444' => t('Dark Grey'),
    '#000000' => t('Black'),
    '#ffffff' => t('White'),
  ];

  //
  // UW Boundless theme settings group.
  //
  $form['uw_boundless'] = [
    '#type' => 'vertical_tabs',
    '#prefix' => '<h2><small>' . t('UW Boundless Settings') . '</small></h2>',
    '#weight' => -11,
  ];

  //
  // Hero image settings tab.
  //
  $form['uw_boundless_hero_image'] = [
    '#type' => 'details',
    '#title' => t('Hero image'),
    '#group' => 'uw_boundless',
  ];

  // Settings for the hero image on the default front page.
  $form['uw_boundless_hero_image']['front_page'] = [
    '#type' => 'fieldset',
    '#title' => t('Front page hero image'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    'uw_boundless_hero_image_front_display' => [
      '#type' => 'radios',
      '#title' => t('Display size'),
      '#options' => [
        'large' => t('Large hero image'),
        'small' => t('Small hero image'),
        'none' => t('None - hide the hero image on the front page'),
      ],
      '#default_value' => theme_get_setting('uw_boundless_hero_image_front_display') ?? 'large',
      '#tree' => FALSE,
    ],
    'uw_boundless_hero_image_front_default' => [
      '#type' => 'checkbox',
      '#title' => t('Use the default hero image'),
      '#default_value' => theme_get_setting('uw_boundless_hero_image_front_default') ?? TRUE,
      '#tree' => FALSE,
      '#description' => t('The correct image size will be selected automatically. Uncheck to upload a custom image.'),
      '#states' => [
        'invisible' => [
          'input[name="uw_boundless_hero_image_front_display"]' => ['value' => 'none'],
        ],
      ],
    ],
    'settings' => [
      '#type' => 'container',
      '#states' => [
        'invisible' => [
          ['input[name="uw_boundless_hero_image_front_default"]' => ['checked' => TRUE]],
          'or',
          ['input[name="uw_boundless_hero_image_front_display"]' => ['value' => 'none']],
        ],
      ],
      'hero_image_front_upload' => [
        '#type' => 'managed_file',
        '#title' => t('Upload hero-image'),
        '#upload_location' => 'public://branding',
        '#default_value' => theme_get_setting('hero_image_front_upload'),
        '#description' => t("Use this field to upload your front-page hero-image."),
        '#upload_validators' => [
          'file_validate_extensions' => ['gif png jpg jpeg'],
        ],
      ],
    ],
  ];

  // Settings for the hero image used on other pages.
  $form['uw_boundless_hero_image']['other_page'] = [
    '#type' => 'fieldset',
    '#title' => t('Hero image'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    'uw_boundless_hero_image_display' => [
      '#type' => 'radios',
      '#title' => t('Display size'),
      '#options' => [
        'small' => t('Small hero image'),
        'none' => t('None - hide the hero image'),
      ],
      '#default_value' => theme_get_setting('uw_boundless_hero_image_display') ?? 'small',
      '#tree' => FALSE,
    ],
    'uw_boundless_hero_image_default' => [
      '#type' => 'checkbox',
      '#title' => t('Use the default hero image'),
      '#tree' => FALSE,
      '#default_value' => theme_get_setting('uw_boundless_hero_image_default'),
      '#description' => t('Check here if you want the theme to use the hero image supplied with it.'),
      '#states' => [
        'invisible' => [
          'input[name="uw_boundless_hero_image_display"]' => ['value' => 'none'],
        ],
      ],
    ],
    'settings' => [
      '#type' => 'container',
      '#states' => [
        'invisible' => [
          ['input[name="uw_boundless_hero_image_default"]' => ['checked' => TRUE]],
          'or',
          ['input[name="uw_boundless_hero_image_display"]' => ['value' => 'none']],
        ],
      ],
      'hero_image_upload' => [
        '#type' => 'managed_file',
        '#title' => t('Upload hero-image'),
        '#description' => t("Use this field to upload your hero-image."),
        '#upload_location' => 'public://branding',
        '#default_value' => theme_get_setting('hero_image_upload'),
        '#upload_validators' => ['file_validate_extensions' => ['gif png jpg jpeg']],
      ],
    ],
  ];

  //
  // Color settings tab.
  //
  $color_palette_url = 'https://www.washington.edu/brand/graphic-elements/primary-color-palette/';
  $form['uw_boundless_colors'] = [
    '#type' => 'details',
    '#title' => t('Color settings'),
    '#group' => 'uw_boundless',
    '#description' => t('Set the color display of certain page elements. For color references, see: <a href="@color_palette_url">UW brand color palette</a>.',
      [
        '@color_palette_url' => $color_palette_url,
      ]),
    'front_page' => [
      '#type' => 'fieldset',
      '#title' => t('front page elements'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      'uw_boundless_front_page_title_color' => [
        '#type' => 'select',
        '#title' => t('Site name'),
        '#default_value' => theme_get_setting('uw_boundless_front_page_title_color') ?? '#ffffff',
        '#options' => $_colors,
      ],
      'uw_boundless_front_page_slant_color' => [
        '#type' => 'select',
        '#title' => t('slant'),
        '#default_value' => theme_get_setting('uw_boundless_front_page_slant_color') ?? '#ffffff',
        '#options' => $_colors,
      ],
      'uw_boundless_front_page_slogan_color' => [
        '#type' => 'select',
        '#title' => t('Site slogan'),
        '#default_value' => theme_get_setting('uw_boundless_front_page_slogan_color') ?? '#ffffff',
        '#options' => $_colors,
      ],
    ],
  ];

  //
  // Sidebar menu tab.
  //
  $form['uw_boundless_sidebar_menu'] = [
    '#type' => 'details',
    '#title' => t('Sidebar menu [deprecated]'),
    '#group' => 'uw_boundless',
    'sidebar_info' => [
      '#markup' => t('<p>As of v1.0 of this theme, the Sidebar menu setting is deprecated. Instead, use the <strong>block_menu</strong> module to create a relative sidebar menu.</p>
       <ol>
         <li>Add the Main navigation block to the top of the Primary region.</li>
         <li>Settings:
            <ul>
              <li>Display title = Yes (Menu block will render the top-level page title.)</li>
              <li>Menu levels: Initial visibility level = 2</li>
              <li>Menu levels: Number of levels to display = 2</li>
              <li>Menu levels: Expand all menu links = Yes (optional)</li>
              <li>Advanced: Fixed parent item = "&lt;Main navigation&gt;"</li>
              <li>Advanced: Use as title = "Active trail\'s parent title"</li>
              <li>Advanced: Link the title = Yes</li>
              <li>Advanced: Make the initial visibility level follow the active menu item = Yes</li>
              <li>Advanced: Initial visibility level will be = "Active menu item"</li>
              <li>HTML and style options: Theme hook suggestion = "main_relative"</li>
            </ul>
         </li>
       </ol>'),
    ]
    // 'uw_boundless_sidebar_menu_visibility' => [
    //   '#type' => 'select',
    //   '#title' => t('Sidebar menu visibility'),
    //   '#default_value' => theme_get_setting('uw_boundless_sidebar_menu_visibility'),
    //   '#options' => [
    //     0 => t('Hidden'),
    //     1 => t('Visible'),
    //   ],
    // ],
  ];
  //
  // Sidebar menu tab.
  //
  $form['uw_boundless_mobile_menu'] = [
    '#type' => 'details',
    '#title' => t('Mobile menu'),
    '#group' => 'uw_boundless',
    'uw_boundless_mobile_menu_type' => [
      '#type' => 'select',
      '#title' => t('Mobile menu type'),
      '#default_value' => theme_get_setting('uw_boundless_mobile_menu_type') ?? 'fixed',
      '#options' => [
        'fixed' => t('Fixed (always show the same top-level items)'),
        'relative' => t('Relative (show items relative to the current page)'),
      ],
    ],
    'relative_menu_info' => [
      '#markup' => t('<p><strong>Important:</strong> In order to use the Relative mobile menu, you must first create a relative menu block. See the <strong>"Sidebar menu (deprecated)"</strong> tab for instructions.</p>')
    ]
  ];
  // Login url settings.
  $form['uw_boundless_login'] = [
    '#type' => 'details',
    '#title' => t('Login settings'),
    '#group' => 'uw_boundless',
  ];
  $form['uw_boundless_login']['uw_boundless_login_url'] = [
    '#type' => 'textfield',
    '#title' => t('Login url'),
    '#description' => t("Enter the path for the login link (lead with a forward slash '/'). The copyright year in the footer will be linked to this path. Leave empty to not link the year in the footer to a login url."),
    '#default_value' => theme_get_setting('uw_boundless_login_url'),
  ];

  //
  // Navbar settings tab.
  //
  $form['uw_boundless_navbar'] = [
    '#type' => 'details',
    '#title' => t('Navbar'),
    '#group' => 'uw_boundless',
  ];
  // Settings for the hero image on the default front page.
  $form['uw_boundless_navbar']['navbar_height'] = [
    '#type' => 'select',
    '#title' => t('Navbar height'),
    '#options' => [
      'default' => t('Default'),
      'thin' => t('Thin'),
    ],
    '#required' => TRUE,
    '#default_value' => theme_get_setting('navbar_height') ?? 'default',
    '#tree' => FALSE,
  ];

  $form['#submit'][] = 'uw_boundless_settings_form_submit';
}

/**
 * Form submission handler for uw_boundless_settings_form.
 *
 * @see uw_boundless_settings_form()
 */
function uw_boundless_settings_form_submit(&$form, &$form_state) {
  // Set the file usage for uploaded hero image files.
  $imagevars = ['hero_image_front_upload', 'hero_image_upload'];
  foreach ($imagevars as $thisimage) {
    $image = $form_state->getValue($thisimage);
    if (!empty($image)) {
      $file = File::load($image[0]);
      if (is_object($file)) {
        if (!$file->isPermanent()) {
          $file->setPermanent();
          $file->save();
          $file_usage = \Drupal::service('file.usage');
          $file_usage->add($file, 'uw_boundless', 'theme', 'uw_boundless.settings');
        }
      }
    }
  }
}

/**
 * Builds a sidebar menu based on the current path.
 *
 * @return string|false
 *   Returns HTML for the sidebar menu. Returns FALSE if the sidebar menu is
 *   hidden.
 *
 * @deprecated v1.0
 */
function _uw_boundless_uw_sidebar_menu() {
  // Check the theme setting for visibility.
  if (!theme_get_setting('uw_boundless_sidebar_menu_visibility')) {
    return FALSE;
  }

  $menu_tree = \Drupal::menuTree();
  $parameters = $menu_tree->getCurrentRouteMenuTreeParameters('main');
  $main_menu_top_level = $menu_tree->load('main', $parameters);

  // Find the first item in the current trail.  Also, we're only interested if
  // that item has children and is accessible by the current user.
  $current_menu_item = NULL;
  foreach ($main_menu_top_level as $menu_item) {
    if ($menu_item->inActiveTrail and $menu_item->hasChildren) {
      $current_menu_item = $menu_item;
      break;
    }
  }

  if (!$current_menu_item) {
    return FALSE;
  }

  $current_path = \Drupal::service('path.current')->getPath();
  $current_uri = Url::fromUserInput($current_path)->toString();

  $title = $current_menu_item->link->getTitle();
  // $current_depth = $current_menu_item->depth;
  $link_object = $current_menu_item->link->getUrlObject();
  $path = $link_object->toString();
  $class = ($path == $current_uri) ? 'current_page_item' : 'current_page_ancestor current_page_parent';

  $output_menu = '<ul>';
  $output_menu .= "<li class=\"page_item page_item_has_children $class\">";
  $output_menu .= Link::fromTextAndUrl($title, $link_object)->toString();

  $output_menu .= '<ul class="children">';
  foreach ($current_menu_item->subtree as $child) {
    $title = $child->link->getTitle();
    $link_object = $child->link->getUrlObject();
    $current_depth = $child->depth;
    $path = $link_object->toString();
    $class = ($path == $current_uri) ? 'current_page_item' : '';

    $output_menu .= "<li class=\"page_item $class\">";
    if ($path == $current_uri) {
      $output_menu .= "<span>$title</span>";
      if ($child->hasChildren) {
        // @todo: Add grandchildren?
        // (This note was an artifact from...before. There's no javascript or
        // CSS to handle grandchildren. Do we need this?)
      }
    }
    else {
      $output_menu .= Link::fromTextAndUrl($title, $link_object)->toString();
    }
    $output_menu .= '</li>';
  }

  $output_menu .= '</ul>';
  $output_menu .= '</li>';
  $output_menu .= '</ul>';
  return $output_menu;
}

/**
 * Gets the text-shadow setting for the provided color.
 *
 * @param string|null $hex
 *   The hex code for the color, including the '#'.
 *
 * @return string
 *   Returns the theme setting value for uw_boundless_text_shadow_black or
 *   uw_boundless_text_shadow_white.
 */
function _uw_boundless_get_text_shadow(?string $hex) {
  switch ($hex) {
    case UwColor::PURPLE:
    case UwColor::METALLIC_GOLD:
    case UwColor::DARK_GREY:
    case UwColor::BLACK:
      return theme_get_setting('uw_boundless_text_shadow_white', 'uw_boundless');
      break;

    // Applies to WHITE, LIGHT_GREY and GOLD.
    default:
      return theme_get_setting('uw_boundless_text_shadow_black', 'uw_boundless');
      break;
  }
}
